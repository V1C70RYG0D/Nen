version: '3.8'

services:
  # Test PostgreSQL Database
  postgres-test:
    image: postgres:15-alpine
    container_name: nen-postgres-test
    environment:
      POSTGRES_DB: nen_platform_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: test_password
      POSTGRES_INITDB_ARGS: --encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./tests/sql/init:/docker-entrypoint-initdb.d
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d nen_platform_test"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: postgres -c 'max_connections=200' -c 'shared_buffers=128MB'

  # Test Redis Instance
  redis-test:
    image: redis:7-alpine
    container_name: nen-redis-test
    ports:
      - "6380:6379"
    volumes:
      - redis_test_data:/data
      - ./tests/redis/redis-test.conf:/usr/local/etc/redis/redis.conf
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server /usr/local/etc/redis/redis.conf

  # Test MinIO for S3-compatible storage testing
  minio-test:
    image: minio/minio:latest
    container_name: nen-minio-test
    ports:
      - "9001:9000"
      - "9002:9001"
    environment:
      MINIO_ROOT_USER: test_access_key
      MINIO_ROOT_PASSWORD: test_secret_key
    volumes:
      - minio_test_data:/data
    networks:
      - test-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Test Mailhog for email testing
  mailhog-test:
    image: mailhog/mailhog:latest
    container_name: nen-mailhog-test
    ports:
      - "1026:1025"  # SMTP
      - "8026:8025"  # Web UI
    networks:
      - test-network

  # Test Prometheus for metrics testing
  prometheus-test:
    image: prom/prometheus:latest
    container_name: nen-prometheus-test
    ports:
      - "9091:9090"
    volumes:
      - ./tests/prometheus/prometheus-test.yml:/etc/prometheus/prometheus.yml
      - prometheus_test_data:/prometheus
    networks:
      - test-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Test Grafana for visualization and monitoring
  grafana-test:
    image: grafana/grafana:latest
    container_name: nen-grafana-test
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_SECURITY_COOKIE_SECURE=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    volumes:
      - grafana_test_data:/var/lib/grafana
      - ./tests/grafana/provisioning:/etc/grafana/provisioning
      - ./tests/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - test-network
    depends_on:
      - prometheus-test
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_test_data:
    driver: local
  redis_test_data:
    driver: local
  minio_test_data:
    driver: local
  prometheus_test_data:
    driver: local
  grafana_test_data:
    driver: local

networks:
  test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
