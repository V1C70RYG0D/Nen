import { PrismaClient } from '@prisma/client';
declare class Database {
    private static instance;
    private prisma;
    private constructor();
    static getInstance(): Database;
    getPrismaClient(): PrismaClient;
    createUser(userData: {
        id?: string;
        username: string;
        email: string;
        address?: string;
        publicKey?: string;
        password?: string;
    }): Promise<{
        level: number;
        id: string;
        username: string;
        email: string;
        password: string | null;
        publicKey: string | null;
        address: string | null;
        experience: number;
        winRate: number;
        totalGames: number;
        oauthProvider: string | null;
        oauthId: string | null;
        isActive: boolean;
        lastLoginAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    updateUser(userId: string, userData: {
        username?: string;
        email?: string;
        address?: string;
        publicKey?: string;
        experience?: number;
        winRate?: number;
        totalGames?: number;
    }): Promise<{
        level: number;
        id: string;
        username: string;
        email: string;
        password: string | null;
        publicKey: string | null;
        address: string | null;
        experience: number;
        winRate: number;
        totalGames: number;
        oauthProvider: string | null;
        oauthId: string | null;
        isActive: boolean;
        lastLoginAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    deleteUser(userId: string): Promise<{
        level: number;
        id: string;
        username: string;
        email: string;
        password: string | null;
        publicKey: string | null;
        address: string | null;
        experience: number;
        winRate: number;
        totalGames: number;
        oauthProvider: string | null;
        oauthId: string | null;
        isActive: boolean;
        lastLoginAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    getUserByAddress(address: string): Promise<{
        level: number;
        id: string;
        username: string;
        email: string;
        password: string | null;
        publicKey: string | null;
        address: string | null;
        experience: number;
        winRate: number;
        totalGames: number;
        oauthProvider: string | null;
        oauthId: string | null;
        isActive: boolean;
        lastLoginAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    } | null>;
    getUserById(id: string): Promise<{
        level: number;
        id: string;
        username: string;
        email: string;
        password: string | null;
        publicKey: string | null;
        address: string | null;
        experience: number;
        winRate: number;
        totalGames: number;
        oauthProvider: string | null;
        oauthId: string | null;
        isActive: boolean;
        lastLoginAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    } | null>;
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    healthCheck(): Promise<boolean>;
}
export declare const getDatabase: () => Database;
export { Database };
export default Database;
//# sourceMappingURL=database.d.ts.map