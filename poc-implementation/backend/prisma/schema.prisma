generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  username        String           @unique
  email           String           @unique
  password        String?
  publicKey       String?
  address         String?          @unique
  level           Int              @default(1)
  experience      Int              @default(0)
  winRate         Float            @default(0.0)
  totalGames      Int              @default(0)
  oauthProvider   String?
  oauthId         String?
  isActive        Boolean          @default(true)
  lastLoginAt     DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  bets            Bet[]
  gamesAsPlayer1  Game[]           @relation("Player1Games")
  gamesAsPlayer2  Game[]           @relation("Player2Games")
  wonGames        Game[]           @relation("WinnerGames")
  nfts            NFT[]
  notifications   Notification[]
  trainingResults TrainingResult[]

  @@map("users")
}

model Game {
  id           String     @id @default(cuid())
  status       GameStatus @default(WAITING)
  player1Id    String
  player2Id    String?
  winnerId     String?
  aiDifficulty String?
  betAmount    Float      @default(0)
  boardState   Json       @default("{}")
  moveHistory  Json       @default("[]")
  startedAt    DateTime?
  completedAt  DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  bets         Bet[]
  player1      User       @relation("Player1Games", fields: [player1Id], references: [id])
  player2      User?      @relation("Player2Games", fields: [player2Id], references: [id])
  winner       User?      @relation("WinnerGames", fields: [winnerId], references: [id])
  moves        Move[]

  @@map("games")
}

model Move {
  id         String   @id @default(cuid())
  gameId     String
  playerId   String
  fromX      Int
  fromY      Int
  toX        Int
  toY        Int
  piece      String
  moveNumber Int
  timestamp  DateTime @default(now())
  game       Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@map("moves")
}

model TrainingResult {
  id                 String   @id @default(cuid())
  sessionId          String
  aiAgentId          String
  userId             String
  configuration      Json
  gameOutcome        Json
  performanceMetrics Json
  createdAt          DateTime @default(now())
  agent              User     @relation(fields: [userId], references: [id])

  @@map("training_results")
}

model Bet {
  id        String    @id @default(cuid())
  userId    String
  gameId    String
  agentId   String?
  amount    Float
  odds      Float     @default(1.0)
  status    BetStatus @default(PENDING)
  payout    Float?
  placedAt  DateTime  @default(now())
  settledAt DateTime?
  game      Game      @relation(fields: [gameId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@map("bets")
}

model NFT {
  id          String    @id @default(cuid())
  tokenId     String    @unique
  ownerId     String
  name        String
  description String
  image       String
  attributes  Json      @default("{}")
  mintedAt    DateTime  @default(now())
  listedAt    DateTime?
  price       Float?
  isListed    Boolean   @default(false)
  owner       User      @relation(fields: [ownerId], references: [id])

  @@map("nfts")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json             @default("{}")
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("sessions")
}

enum GameStatus {
  WAITING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum BetStatus {
  PENDING
  WON
  LOST
  CANCELLED
}

enum NotificationType {
  GAME_INVITE
  GAME_START
  GAME_END
  BET_WON
  BET_LOST
  LEVEL_UP
  ACHIEVEMENT
  SYSTEM
}
