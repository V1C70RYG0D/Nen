/**
 * Mock Logger for Testing
 */
import { Logger } from 'winston';

export function createMockLogger(): Logger {
  return {
    error: jest.fn() as any,
    warn: jest.fn() as any,
    info: jest.fn() as any,
    debug: jest.fn() as any,
    log: jest.fn() as any,
    verbose: jest.fn() as any,
    silly: jest.fn() as any,
    profile: jest.fn() as any,
    startTimer: jest.fn() as any,
    query: jest.fn() as any,
    stream: jest.fn() as any,
    close: jest.fn() as any,
    clear: jest.fn() as any,
    add: jest.fn() as any,
    remove: jest.fn() as any,
    configure: jest.fn() as any,
    child: jest.fn() as any,
    level: 'info',
    levels: {} as any,
    format: {} as any,
    transports: [] as any,
    exceptions: {} as any,
    rejections: {} as any,
    exitOnError: true,
    silent: false,
    emitErrs: true,
    profiler: {} as any,
    profilers: {} as any,
    handleExceptions: false,
    handleRejections: false,
    handleUncaughtExceptions: false,
    handleUnhandledRejections: false,
    defaultMeta: {} as any,
    on: jest.fn() as any,
    once: jest.fn() as any,
    emit: jest.fn() as any,
    addListener: jest.fn() as any,
    removeListener: jest.fn() as any,
    removeAllListeners: jest.fn() as any,
    setMaxListeners: jest.fn() as any,
    getMaxListeners: jest.fn() as any,
    listeners: jest.fn() as any,
    rawListeners: jest.fn() as any,
    listenerCount: jest.fn() as any,
    prependListener: jest.fn() as any,
    prependOnceListener: jest.fn() as any,
    eventNames: jest.fn() as any,
    off: jest.fn() as any,
    end: jest.fn() as any,
    write: jest.fn() as any,
    help: jest.fn() as any,
    data: jest.fn() as any,
    prompt: jest.fn() as any,
    http: jest.fn() as any,
    emerg: jest.fn() as any,
    alert: jest.fn() as any,
    crit: jest.fn() as any,
    notice: jest.fn() as any,
    input: jest.fn() as any,
    [Symbol.toStringTag]: 'Logger' as any
  } as unknown as Logger;
}
