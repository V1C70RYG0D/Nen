# Advanced CI/CD Pipeline for Nen Platform POC
# Phase 4.1: Advanced CI/CD (Days 106-110)
# 
# Implements comprehensive GitHub Actions with security scanning, automated testing
# across environments, deployment pipelines with rollback capabilities, monitoring integration

name: 'Nen Platform POC - Advanced CI/CD'

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  release:
    types: [published]

env:
  NODE_VERSION: '22.x'
  RUST_VERSION: 'stable'
  PYTHON_VERSION: '3.12'

jobs:
  # ==========================================
  # SECURITY SCANNING AND ANALYSIS
  # ==========================================
  security-scan:
    name: 'Security Analysis'
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Audit npm packages
        run: |
          cd frontend && npm audit --audit-level high
          cd ../backend && npm audit --audit-level high

  # ==========================================
  # FRONTEND BUILD AND TEST - ENHANCED
  # ==========================================
  # Frontend Testing and Build
  frontend-test:
    name: 'Frontend Tests'
    runs-on: ubuntu-latest
    needs: security-scan
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Lint Code
      run: npm run lint
    
    - name: Type check
      run: npx tsc --noEmit
    
    - name: Run Tests
      run: npm test -- --coverage --watchAll=false
    
    - name: Build Application
      run: npm run build
      env:
        NEXT_PUBLIC_SOLANA_RPC_URL: ${{ secrets.NEXT_PUBLIC_SOLANA_RPC_URL }}
        NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
    
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/.next/
        retention-days: 7
      with:
        name: frontend-build
        path: frontend/.next/
        retention-days: 1

  # Backend Testing and Build  
  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: nen_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Type check
      run: npm run type-check
    
    - name: Lint
      run: npm run lint
    
    - name: Test
      run: npm run test
      env:
        DATABASE_URL: postgresql://postgres:test@localhost/nen_test
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test
    
    - name: Build
      run: npm run build

  # Smart Contract Testing
  smart-contracts-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./smart-contracts
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        override: true
        components: rustfmt, clippy
    
    - name: Setup Solana
      run: |
        sh -c "$(curl -sSfL https://release.solana.com/v1.17.0/install)"
        echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
    
    - name: Setup Anchor
      run: |
        npm install -g @coral-xyz/anchor-cli@0.29.0
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Format check
      run: cargo fmt -- --check
    
    - name: Clippy
      run: cargo clippy -- -D warnings
    
    - name: Test
      run: anchor test

  # AI Testing
  ai-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ai
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Lint
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Test
      run: pytest --cov=./ --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./ai/coverage.xml

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to staging
  deploy-staging:
    needs: [frontend-test, backend-test, smart-contracts-test, ai-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Vercel (Staging)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend
        scope: ${{ secrets.VERCEL_ORG_ID }}
        alias-domains: nen-staging.vercel.app

  # Deploy to production
  deploy-production:
    needs: [frontend-test, backend-test, smart-contracts-test, ai-test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/.next/
    
    - name: Deploy to Vercel (Production)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend
        vercel-args: '--prod'
        scope: ${{ secrets.VERCEL_ORG_ID }}
    
    - name: Notify deployment
      run: |
        echo "ðŸš€ Production deployment complete!"
        echo "Frontend: https://nen-platform.vercel.app"
        echo "Commit: ${{ github.sha }}"

  # Performance Testing
  lighthouse:
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './frontend/lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true
