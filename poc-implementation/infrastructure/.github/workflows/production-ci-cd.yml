# Nen Platform POC - Enhanced GitHub Actions CI/CD
# Following POC Master Plan Phase 4.1: Advanced CI/CD
# Implements GI Guidelines #26: CI/CD Integration

name: 'Nen Platform POC - Production CI/CD'

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 6 * * *'  # Daily security scans

env:
  NODE_VERSION: '24.x'
  PYTHON_VERSION: '3.12'
  RUST_VERSION: 'stable'
  SOLANA_VERSION: '1.18.0'

jobs:
  # Security and Vulnerability Scanning
  security-scan:
    name: 'Security Audit'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: 'Run Security Audit'
        run: |
          echo "ðŸ”’ Starting comprehensive security scan..."
          # Vulnerability scanning for dependencies
          npm audit --audit-level=moderate
          # SAST scanning
          docker run --rm -v "$(pwd):/src" securecodewarrior/semgrep --config=auto /src
        continue-on-error: true

  # Code Quality and Linting
  code-quality:
    name: 'Code Quality Check'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 'Install Dependencies'
        run: npm ci
      
      - name: 'Lint Frontend'
        run: |
          cd frontend
          npm run lint
          npm run typecheck
      
      - name: 'Lint Backend'
        run: |
          cd backend
          npm run lint
          npm run typecheck
      
      - name: 'Security Linting'
        run: |
          npx eslint . --ext .js,.ts,.tsx --rule 'security/detect-unsafe-regex: error'

  # Frontend Testing and Build
  frontend-test:
    name: 'Frontend Tests'
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 'Install Dependencies'
        run: |
          npm ci
          cd frontend && npm ci
      
      - name: 'Run Unit Tests'
        run: |
          cd frontend
          npm run test:coverage
      
      - name: 'Build Frontend'
        run: |
          cd frontend
          npm run build
        env:
          CI: true
      
      - name: 'Upload Coverage'
        uses: codecov/codecov-action@v3
        with:
          file: frontend/coverage/lcov.info
          flags: frontend

  # Backend Testing and Build
  backend-test:
    name: 'Backend Tests'
    runs-on: ubuntu-latest
    needs: [code-quality]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: nentest
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 'Install Dependencies'
        run: |
          npm ci
          cd backend && npm ci
      
      - name: 'Run Unit Tests'
        run: |
          cd backend
          npm run test:coverage
        env:
          DATABASE_URL: postgres://postgres:testpass@localhost:5432/nentest
          REDIS_URL: redis://localhost:6379
      
      - name: 'Run Integration Tests'
        run: |
          cd backend
          npm run test:integration
        env:
          DATABASE_URL: postgres://postgres:testpass@localhost:5432/nentest
          REDIS_URL: redis://localhost:6379
      
      - name: 'Upload Coverage'
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage/lcov.info
          flags: backend

  # Smart Contract Testing
  smart-contract-test:
    name: 'Smart Contract Tests'
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 'Install Rust'
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
      
      - name: 'Install Solana'
        run: |
          curl -sSfL https://release.solana.com/v${{ env.SOLANA_VERSION }}/install | sh
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
      
      - name: 'Install Anchor'
        run: |
          npm install -g @coral-xyz/anchor-cli@0.30.0
      
      - name: 'Run Contract Tests'
        run: |
          cd smart-contracts
          anchor test --skip-local-validator

  # AI Service Testing
  ai-service-test:
    name: 'AI Service Tests'
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 'Install Dependencies'
        run: |
          cd ai
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      
      - name: 'Run AI Tests'
        run: |
          cd ai
          python -m pytest tests/ --cov=. --cov-report=xml
      
      - name: 'Upload Coverage'
        uses: codecov/codecov-action@v3
        with:
          file: ai/coverage.xml
          flags: ai-service

  # End-to-End Testing
  e2e-test:
    name: 'E2E Tests'
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, smart-contract-test]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 'Install Dependencies'
        run: npm ci
      
      - name: 'Run E2E Tests'
        run: |
          npm run test:e2e:ci
        env:
          CI: true

  # Performance and Load Testing
  performance-test:
    name: 'Performance Tests'
    runs-on: ubuntu-latest
    needs: [e2e-test]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 'Install Dependencies'
        run: npm ci
      
      - name: 'Run Load Tests'
        run: |
          node load-testing-advanced.js --ci-mode
      
      - name: 'Performance Validation'
        run: |
          node performance-validation.js --ci-mode

  # Production Deployment
  deploy-production:
    name: 'Production Deployment'
    runs-on: ubuntu-latest
    needs: [security-scan, performance-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 'Production Build'
        run: |
          npm ci
          npm run build:production
        env:
          NODE_ENV: production
      
      - name: 'Deploy to Production'
        run: |
          chmod +x deploy-production-complete.sh
          ./deploy-production-complete.sh --automated
        env:
          DEPLOYMENT_ENV: production
          SOLANA_CLUSTER: mainnet-beta
      
      - name: 'Post-Deployment Health Check'
        run: |
          chmod +x scripts/production-health-check.sh
          ./scripts/production-health-check.sh --production
      
      - name: 'Notify Deployment Success'
        if: success()
        run: |
          echo "ðŸš€ Production deployment successful!"
          # Add Slack/Discord notification here

  # Security Hardening
  security-hardening:
    name: 'Security Hardening'
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: 'Run Security Audit'
        run: |
          chmod +x infrastructure/security/security-audit-production.sh
          ./infrastructure/security/security-audit-production.sh --automated
      
      - name: 'Container Security Scanning'
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image nen-platform:latest
      
      - name: 'Generate Security Report'
        run: |
          echo "ðŸ“Š Security audit completed"
          # Generate and store security report
