version: '3.8'

services:
  # Redis Cluster for Caching and Session Management
  redis-master:
    image: redis:8.2-alpine
    container_name: nen-redis-master
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-nen-platform-redis} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - nen-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-nen-platform-redis}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL with Enhanced Configuration
  postgres:
    image: postgres:16-alpine
    container_name: nen-postgres
    environment:
      POSTGRES_DB: nen_platform
      POSTGRES_USER: ${POSTGRES_USER:-nen_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nen_platform_secure}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/init-db:/docker-entrypoint-initdb.d
    networks:
      - nen-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-nen_user} -d nen_platform"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Backend Service with Enhanced Features
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: nen-backend-enhanced
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://${POSTGRES_USER:-nen_user}:${POSTGRES_PASSWORD:-nen_platform_secure}@postgres:5432/nen_platform
      REDIS_URL: redis://default:${REDIS_PASSWORD:-nen-platform-redis}@redis-master:6379
      SOLANA_RPC_URL: ${SOLANA_RPC_URL:-https://api.devnet.solana.com}
      JWT_SECRET: ${JWT_SECRET:-nen-platform-jwt-secret-enhanced}
      MAGICBLOCK_API_KEY: ${MAGICBLOCK_API_KEY}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - nen-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # AI Service
  ai-service:
    build:
      context: ./ai
      dockerfile: ../docker/Dockerfile.ai
    container_name: nen-ai-service
    environment:
      PYTHONPATH: /app
      AI_SERVICE_PORT: 8001
      BACKEND_URL: http://backend:3001
      REDIS_URL: redis://default:${REDIS_PASSWORD:-nen-platform-redis}@redis-master:6379
      MODEL_CACHE_SIZE: 1000
    ports:
      - "8001:8001"
    depends_on:
      - redis-master
      - backend
    volumes:
      - ai-models:/app/models
      - ./ai/logs:/app/logs
    networks:
      - nen-network
    restart: unless-stopped

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/Dockerfile.frontend
    container_name: nen-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_WS_URL: ws://localhost:3001
      NEXT_PUBLIC_SOLANA_NETWORK: devnet
      NEXT_PUBLIC_RPC_URL: ${SOLANA_RPC_URL:-https://api.devnet.solana.com}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - nen-network
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: nen-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - nen-network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:10.1.0
    container_name: nen-grafana
    ports:
      - "3030:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-nen-platform-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana:/etc/grafana/provisioning
    networks:
      - nen-network
    restart: unless-stopped

  # Nginx Load Balancer & Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: nen-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d
      - nginx-logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - nen-network
    restart: unless-stopped

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  ai-models:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  nginx-logs:
    driver: local

networks:
  nen-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
